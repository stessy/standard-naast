package standardNaast.view;

import java.awt.Dimension;
import java.awt.Frame;

import java.awt.Rectangle;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.WindowAdapter;

import java.awt.event.WindowEvent;

import java.util.Vector;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import javax.swing.table.AbstractTableModel;

import standardNaast.model.MatchDB;

public class PresenceCarDialog
    extends JDialog
{
    private JLabel match = new JLabel();
    private JComboBox jComboBoxMatch = new JComboBox();
    private JScrollPane jScrollPaneMembres = new JScrollPane();
    private JTable jTableMembres = new JTable();
    private JScrollPane jScrollPaneNonMembres = new JScrollPane();
    private JTable jTableNonMembres = new JTable();
    Vector matchIDVector = new Vector();
    Vector dateMatch = new Vector();
    private boolean DEBUG = false;
    private Vector prixLocomotionIDMembres = new Vector();
    private Vector prixLocomotionIDNonMembres = new Vector();
    int matchID = 0;
    

    public PresenceCarDialog()
    {
        this(null, "Déplacements en car", false);
    }

    public PresenceCarDialog(Frame parent, String title, boolean modal)
    {
        super(parent, title, modal);
        try
        {
            jbInit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private void jbInit()
        throws Exception
    {
        this.setSize(new Dimension(1024, 768));
        this.getContentPane().setLayout( null );
        this.addWindowListener(new WindowAdapter()
                {
                    public void windowClosing(WindowEvent e)
                    {
                        this_windowClosing(e);
                    }
                });
        
        match.setText("Match");
        match.setBounds(new Rectangle(10, 70, 60, 15));
        jComboBoxMatch.setBounds(new Rectangle(50, 65, 370, 20));        
        jScrollPaneMembres.setBounds(new Rectangle(10, 100, 490, 630));
        jScrollPaneNonMembres.setBounds(new Rectangle(515, 100, 490, 630));
        jScrollPaneMembres.getViewport().add(jTableMembres, null);
        jScrollPaneNonMembres.getViewport().add(jTableNonMembres, null);
        this.getContentPane().add(jScrollPaneNonMembres, null);
        this.getContentPane().add(jScrollPaneMembres, null);
        this.getContentPane().add(jComboBoxMatch, null);
        this.getContentPane().add(match, null);
        
        populateComboBoxMatch();
        
    }

    private void jComboBoxMatch_actionPerformed(ActionEvent e)
    {
        jScrollPaneMembres.remove(jTableMembres);
        this.remove(jScrollPaneMembres);
        matchID = (Integer)matchIDVector.get((jComboBoxMatch.getSelectedIndex()));
        jTableMembres = new JTable(new DeplacementsCarTableModelMembres());
        jScrollPaneMembres = new JScrollPane();
        jScrollPaneMembres.setBounds(new Rectangle(10, 100, 490, 630));
        jScrollPaneMembres.getViewport().add(jTableMembres, null);
        this.getContentPane().add(jScrollPaneMembres, null);
        
        jScrollPaneNonMembres.remove(jTableNonMembres);
        this.remove(jScrollPaneNonMembres);
        matchID = (Integer)matchIDVector.get((jComboBoxMatch.getSelectedIndex()));
        jTableNonMembres = new JTable(new DeplacementsCarTableModelNonMembres());
        jScrollPaneNonMembres = new JScrollPane();
        jScrollPaneNonMembres.setBounds(new Rectangle(515, 100, 490, 630));
        jScrollPaneNonMembres.getViewport().add(jTableNonMembres, null);
        this.getContentPane().add(jScrollPaneNonMembres, null);
        
        repaint();
        
    }
    
    private void populateComboBoxMatch()
    {
        this.remove(jComboBoxMatch);
        jComboBoxMatch = new JComboBox();
        jComboBoxMatch.setBounds(new Rectangle(50, 65, 370, 20));
        
        this.getContentPane().add(jComboBoxMatch, null);
        repaint();
        MatchDB matchDB = new MatchDB();
        try
        {
            Vector data = matchDB.getMatchsForDeplacementCar();
            Vector allMatches = (Vector) data.get(0);
            System.out.println("Tous les match: "+allMatches.size());
            dateMatch = new Vector();
            matchIDVector = new Vector();
            for(int i = 0; i< allMatches.size(); i++)
            {
                Vector match = (Vector)allMatches.get(i);
                System.out.println("match id: "+(Integer)match.get(0));
                System.out.println("Match name: "+(String)match.get(1));
                System.out.println("date match: "+(String)match.get(2));
                matchIDVector.add((Integer)match.get(0));
                jComboBoxMatch.addItem((String)match.get(1));
                dateMatch.add((String)match.get(2));
            }
        }
        
        catch(Exception e)
        {
            e.printStackTrace();
        }
        jComboBoxMatch.addActionListener(new ActionListener()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                        jComboBoxMatch_actionPerformed(e);
                    }
                });
        
    }
    
    public static void main(String args[])
    {
        new PresenceCarDialog();
    }

    private void this_windowClosing(WindowEvent e)
    {
    }
    private void populateTables()
    {
        
    }
    
    private Vector getDeplacementsCarParMatch(int match,boolean b)
    {
        MatchDB matchDB = new MatchDB();
        Vector v = null;
        try
        {
            v =  matchDB.getDeplacementsCarParMatch(match,b);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }        
        return v;
        
    }
    
    private void setPrixLocomotionMembres(Vector prixLocomotion)
    {
        prixLocomotionIDMembres = new Vector();
        this.prixLocomotionIDMembres = prixLocomotion;        
    }
    
    private void setPrixLocomotionNonMembres(Vector prixLocomotion)
    {
        prixLocomotionIDNonMembres = new Vector();
        this.prixLocomotionIDNonMembres = prixLocomotion;        
    }
    
    class DeplacementsCarTableModelMembres
        extends AbstractTableModel
    {
       
        Vector deplacements = getDeplacementsCarParMatch(matchID,true);
        Vector colNames = (Vector) deplacements.get(1);
        Vector allDeplacements = (Vector) deplacements.get(0);
        Vector prixLocomotionIDMembres = (Vector) deplacements.get(2);        
        
        private String[] columnNames = 
            getColumnNames((Vector) deplacements.get(1));
        private Object[][] data = getAllRows(allDeplacements);

        public int getColumnCount()
        {
            return columnNames.length;
        }

        public int getRowCount()
        {
            return data.length;
        }

        public String getColumnName(int col)
        {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col)
        {
            return data[row][col];
        }

        /*
             * JTable uses this method to determine the default renderer/
             * editor for each cell.  If we didn't implement this method,
             * then the last column would contain text ("true"/"false"),
             * rather than a check box.
             */

        public Class getColumnClass(int c)
        {
            return getValueAt(0, c).getClass();
        }

        /*
             * Don't need to implement this method unless your table's
             * editable.
             */

        public boolean isCellEditable(int row, int col)
        {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            /*if (col < 2) {
                    return false;
                } else {
                    return true;
              
                }*/
            if(col == 2)
            {
                return true;
            }
            else return false;
            
        }

        /*
             * Don't need to implement this method unless your table's
             * data can change.
             */

        public void setValueAt(Object value, int row, int col)
        {
            if (DEBUG)
            {
                System.out.println("Setting value at " + row + "," + col + 
                                   " to " + value + " (an instance of " + 
                                   value.getClass() + ")");
            }

            data[row][col] = value;
            fireTableCellUpdated(row, col);

            if (DEBUG)
            {
                System.out.println("New value of data:");
                printDebugData();
            }
        }

        private void printDebugData()
        {
            int numRows = getRowCount();
            int numCols = getColumnCount();

            for (int i = 0; i < numRows; i++)
            {
                System.out.print("    row " + i + ":");
                for (int j = 0; j < numCols; j++)
                {
                    System.out.print("  " + data[i][j]);
                }
                System.out.println();
            }
            System.out.println("--------------------------");
        }
        
        private int getMatchID()
        {
            System.out.println(matchID);
            return 0;
        }

        private String[] getColumnNames(Vector colNames)
        {
            String[] objects = new String[colNames.size()];

            for (int i = 0; i < colNames.size(); i++)
            {
                objects[i] = (String) colNames.get(i);
            }

            return objects;
        }

        private Object[][] getAllRows(Vector allRows)
        {
            Object[][] allData = 
                new Object[allRows.size()][getColumnCount()];
            for (int i = 0; i < allRows.size(); i++)
            {
                Vector row = (Vector) allRows.get(i);
                allData[i][0] = (Integer) row.get(0);
                allData[i][1] = (String) row.get(1);
                allData[i][2] = (Integer) row.get(2);
                allData[i][2] = (Boolean) row.get(3);                
            }

            return allData;
        }
    }
    
    class DeplacementsCarTableModelNonMembres
        extends AbstractTableModel
    {
        

        
        int i = getMatchID();
        Vector deplacements = getDeplacementsCarParMatch(matchID,false);
        Vector colNames = (Vector) deplacements.get(1);
        Vector allDeplacements = (Vector) deplacements.get(0);
        Vector prixLocomotionIDMembres = (Vector) deplacements.get(2);        
        
        private String[] columnNames = 
            getColumnNames((Vector) deplacements.get(1));
        private Object[][] data = getAllRows(allDeplacements);

        public int getColumnCount()
        {
            return columnNames.length;
        }

        public int getRowCount()
        {
            return data.length;
        }

        public String getColumnName(int col)
        {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col)
        {
            return data[row][col];
        }

        /*
             * JTable uses this method to determine the default renderer/
             * editor for each cell.  If we didn't implement this method,
             * then the last column would contain text ("true"/"false"),
             * rather than a check box.
             */

        public Class getColumnClass(int c)
        {
            return getValueAt(0, c).getClass();
        }

        /*
             * Don't need to implement this method unless your table's
             * editable.
             */

        public boolean isCellEditable(int row, int col)
        {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            /*if (col < 2) {
                    return false;
                } else {
                    return true;
              
                }*/
            if(col == 2)
            {
                return true;
            }
            else return false;
            
        }

        /*
             * Don't need to implement this method unless your table's
             * data can change.
             */

        public void setValueAt(Object value, int row, int col)
        {
            if (DEBUG)
            {
                System.out.println("Setting value at " + row + "," + col + 
                                   " to " + value + " (an instance of " + 
                                   value.getClass() + ")");
            }

            data[row][col] = value;
            fireTableCellUpdated(row, col);

            if (DEBUG)
            {
                System.out.println("New value of data:");
                printDebugData();
            }
        }

        private void printDebugData()
        {
            int numRows = getRowCount();
            int numCols = getColumnCount();

            for (int i = 0; i < numRows; i++)
            {
                System.out.print("    row " + i + ":");
                for (int j = 0; j < numCols; j++)
                {
                    System.out.print("  " + data[i][j]);
                }
                System.out.println();
            }
            System.out.println("--------------------------");
        }
        
        private int getMatchID()
        {
            System.out.println(matchID);
            return 0;
        }

        private String[] getColumnNames(Vector colNames)
        {
            String[] objects = new String[colNames.size()];

            for (int i = 0; i < colNames.size(); i++)
            {
                objects[i] = (String) colNames.get(i);
            }

            return objects;
        }

        private Object[][] getAllRows(Vector allRows)
        {
            Object[][] allData = 
                new Object[allRows.size()][getColumnCount()];
            for (int i = 0; i < allRows.size(); i++)
            {
                Vector row = (Vector) allRows.get(i);
                allData[i][0] = (Integer) row.get(0);
                allData[i][1] = (String) row.get(1);
                allData[i][2] = (Integer) row.get(2);
                allData[i][2] = (Boolean) row.get(3);                
            }

            return allData;
        }
    }
}
